// _:ArtifactTemplate
// ------------------

// The ArtifactTemplate is a RegEx-like representation of the possible forms, which can be inserted at the Artifact position in an IDS Usage Control Template.

(
  { "@id": "?ArtifactUri" }                               // directly insert the Artifact URI, if known
| // or
  {
      "@type": "ids:Collection",
      "ids:source": "?DefinedCollection"                  // reference to a well-known Collection which is hosted at the given URI or a well-known PIP/PDP can decide whether or not a specific Artifact is in the Collection or not
  }
| // or
  {
    "@type": "ids:Collection",                            // a Collection with exactly one condition to describe its members
    "ids:contentRefinement": {
      "@type": "ids:Constraint",                          // Define a collection of data objects which, for instance, all have an explicit attribute "color":"blue"
      "ids:leftOperand": "?IdscLeftOperand",              // The feature of interest, for instance ?IdscLeftOperand := idsc:PATH
      "ids:operator": "?IdscBinaryOperator",              // The kind of check, which shall be executed on the feature of interest, for instance ?IdscBinaryOperator := idsc:STRING_EQ
      "ids:rightOperand": "?Value"                        // The value expression all members of this collection have to share, for instance ?Value := "blue"
      (, "ids:ids:pipEndpoint": "?AttributeLocation" )?   // A URI or path expression to the target attribute, ?AttributeLocation := "//color"
      (, "ids:unit": "?Unit" )?                           // A unit which may further explain the ?Value, for instance <http://dbpedia.org/resource/Color>.
    }
  }
| // or
  {
    "@type": "ids:Collection",
    "ids:contentRefinement": {
      "@type": "ids:LogicalConstraint",                     // A Collection with more than one condition to describe its members.
      "?IdsOperand": [                                      // The operand to connect the constraints, for instance ?IdsOperand := idsc:OR
        (                                                   // LogicalConstraints allow the expression of alternatives. For instance, we can select which have "color":"blue" OR "color":"green"
          "@type": "ids:Constraint",
          "ids:leftOperand": "?IdscLeftOperand",
          "ids:operator": "?IdsBinaryOperator",
          "ids:rightOperand": "?Value"
          (, "ids:ids:pipEndpoint": "?AttributeLocation" )?
          (, "ids:unit": "?Unit" )?
        ){2,} // at least two constraints
      ]
    }
  }
)