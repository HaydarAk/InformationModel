@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dcmitype: <http://purl.org/dc/dcmitype/> .
@prefix ids: <https://w3id.org/ids/core/> .
@prefix idsm: <https://w3id.org/ids/metamodel/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix idsc_media: <https://w3id.org/ids/code/mediatype/> .
@prefix idsc_pack: <https://w3id.org/ids/code/pack/> .
@prefix idsc_lic: <https://w3id.org/ids/code/license/> .
@prefix : <urn:ids:example:> .


:DAT2
    ids:title "European highway statistics lookup"@en ;
    ids:description "Data services providing statistics of European highways"@en;
    ids:keyword "highway", "statistics", "Europe";

    ids:interface[
        # task: learn about valid values -> enable creating a query
        ids:operation [
            a ids:ListParameterRange ;
                ids:input [
                    # URI or name of a recognized / defined non-terminal parameter
                    # evaluated w.r.t. the *resource*, i.e. has the
                    # same resolution across all its contents

                ] ;
                ids:output[
                    # List i.e. sorted collection of corresponding values/artifacts
                ]
        ] ;
        # task: make a query

        ids:operation [
            a ids:RetrieveContent;
                # Given defined highway
                ids:mandatoryInput :HIGHWAY_PARAM ;

                # whatever is in the group, it is a mandatory input
                ids:mandatoryInputGroup  [
                    # parameter list of a range contains exactly 2 parameters
                    a ids:ParameterRange ;
                        # at least one boundary defined
                        ids:paramGroupingOperator ids:or ;
                        # list - in cases order matters
                        ids:parameterList (
                            :YEAR_PARAM # lower boundary
                            :YEAR_PARAM # upper boundary
                        )
                ] ;

                # optional
                ids:inputGroup  [
                    a ids:ParameterRange ;
                        # at least one boundary defined
                        ids:paramGroupingOperator ids:or ;
                        # list - in cases order matters
                        ids:parameterList (
                            :MONTH_PARAM # lower boundary
                            :MONTH_PARAM # upper boundary
                        )
                ] ;


                ids:output[
                    # CSV File according to generic content template from DAT2
                ]
        ]


    ] .



